{"ast":null,"code":"import _slicedToArray from \"/home/haiduong/B\\u1EA3n t\\u1EA3i v\\u1EC1/LipToken_NFT_game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/haiduong/B\\u1EA3n t\\u1EA3i v\\u1EC1/LipToken_NFT_game-master/src/components/OwnLip.js\";\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { handleConnect } from '../redux/blockchain/blockchainActions';\nimport { handleFetchData } from '../redux/data/dataActions';\nimport * as s from '../styled/globalStyles';\nimport LipLayout from './LipLayout';\n\nfunction OwnLip() {\n  var _this = this;\n\n  var dispatch = useDispatch();\n  var blockchain = useSelector(function (state) {\n    return state.blockchain;\n  });\n  var data = useSelector(function (state) {\n    return state.data;\n  });\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loading = _React$useState2[0],\n      setLoading = _React$useState2[1];\n\n  React.useEffect(function () {\n    if (blockchain.account && blockchain.lipToken) {\n      dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n    }\n  }, [dispatch, blockchain.account, blockchain.lipToken]);\n\n  var mintNFT = function mintNFT(_name) {\n    setLoading(true);\n    blockchain.lipToken.methods.createRandomLip(_name).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei(\"0.01\", \"ether\")\n    }, function (err) {\n      if (!err) {\n        dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n      } else {\n        alert(\"Error payment\");\n      }\n\n      setLoading(false);\n    });\n  };\n\n  var handleLevelUpLip = function handleLevelUpLip(lip) {\n    setLoading(true);\n    blockchain.lipToken.methods.levelUp(parseInt(lip.id.toString())).send({\n      from: blockchain.account,\n      value: blockchain.web3.utils.toWei(\"0.01\", \"ether\")\n    }, function (err) {\n      if (!err) {\n        dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n        alert(\"It might be take a few second to update your NFT!\");\n      } else {\n        console.log('level up err', err);\n        alert(\"You have to wait 1 day to level up your lip\");\n      }\n\n      setLoading(false);\n    });\n  };\n\n  function handleChangeName(_id, _newName) {\n    if (!_newName) return;\n    setLoading(true);\n    blockchain.lipToken.methods.changeName(_id, _newName).send({\n      from: blockchain.account\n    }, function (err) {\n      if (!err) {\n        alert(\"It might be take a few second to update your NFT!\");\n        dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n      } else {\n        console.log('change name err', err);\n        alert(\"Your lip must be at least level 2 to change its name.\");\n      }\n\n      setLoading(false);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container-fluid mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    role: \"main\",\n    className: \"col-lg-12 d-flex text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content mr-auto ml-auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, !blockchain.account || !blockchain.lipToken ? /*#__PURE__*/React.createElement(\"button\", {\n    className: \"connect_btn\",\n    onClick: function onClick(e) {\n      e.preventDefault();\n      dispatch(handleConnect());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 19\n    }\n  }, \"Connect to the game with metamask\") : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(s.TextTitle, {\n    className: \"welcome_title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, \"Welcome to the game\"), /*#__PURE__*/React.createElement(s.SpacerSmall, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: loading,\n    onClick: function onClick(e) {\n      e.preventDefault();\n      mintNFT(\"BUI HUY TUNG :)\");\n    },\n    className: \"create_button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, \"Create new random lip\"), blockchain.errMesg && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(s.SpacerXSmall, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 27\n    }\n  }), /*#__PURE__*/React.createElement(s.TextDescription, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 27\n    }\n  }, blockchain.errMesg)), /*#__PURE__*/React.createElement(s.SpacerSmall, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(s.Container, {\n    fd: \"row\",\n    style: {\n      flexWrap: 'wrap',\n      gap: '3em'\n    },\n    jc: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  }, data.allOwnerLips && data.allOwnerLips.map(function (item) {\n    return /*#__PURE__*/React.createElement(LipLayout, {\n      loading: loading,\n      key: Math.random(),\n      item: item,\n      handleLevelUpLip: handleLevelUpLip,\n      handleChangeName: handleChangeName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 29\n      }\n    });\n  }))))))));\n}\n\nexport default OwnLip;","map":{"version":3,"sources":["/home/haiduong/Bản tải về/LipToken_NFT_game-master/src/components/OwnLip.js"],"names":["React","useDispatch","useSelector","handleConnect","handleFetchData","s","LipLayout","OwnLip","dispatch","blockchain","state","data","useState","loading","setLoading","useEffect","account","lipToken","mintNFT","_name","methods","createRandomLip","send","from","value","web3","utils","toWei","err","alert","handleLevelUpLip","lip","levelUp","parseInt","id","toString","console","log","handleChangeName","_id","_newName","changeName","e","preventDefault","errMesg","flexWrap","gap","allOwnerLips","map","item","Math","random"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { handleConnect } from '../redux/blockchain/blockchainActions'\nimport { handleFetchData } from '../redux/data/dataActions'\nimport * as s from '../styled/globalStyles'\nimport LipLayout from './LipLayout'\n\nfunction OwnLip() {\n  const dispatch = useDispatch()\n  const blockchain = useSelector(state => state.blockchain)\n  const data = useSelector(state => state.data)\n  const [loading, setLoading] = React.useState(false)\n\n  React.useEffect(() => {\n    if (blockchain.account && blockchain.lipToken) {\n      dispatch(handleFetchData(blockchain.lipToken, blockchain.account))\n    }\n  }, [dispatch, blockchain.account, blockchain.lipToken]);\n\n  const mintNFT = (_name) => {\n    setLoading(true);\n    blockchain.lipToken.methods\n      .createRandomLip(_name)\n      .send({\n        from: blockchain.account,\n        value: blockchain.web3.utils.toWei(\"0.01\", \"ether\"),\n      }, (err) => {\n        if (!err) {\n          dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n        } else {\n          alert(\"Error payment\")\n        }\n        setLoading(false);\n      })\n  };\n\n  const handleLevelUpLip = (lip) => {\n    setLoading(true);\n    blockchain.lipToken.methods\n      .levelUp(parseInt(lip.id.toString()))\n      .send({\n        from: blockchain.account,\n        value: blockchain.web3.utils.toWei(\"0.01\", \"ether\")\n      }, (err) => {\n        if (!err) {\n          dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n          alert(\"It might be take a few second to update your NFT!\")\n        } else {\n          console.log('level up err', err);\n          alert(\"You have to wait 1 day to level up your lip\")\n        }\n        setLoading(false);\n      })\n  };\n\n  function handleChangeName(_id, _newName) {\n    if (!_newName) return\n    setLoading(true);\n    blockchain.lipToken.methods\n      .changeName(_id, _newName).send({\n        from: blockchain.account\n      }, (err) => {\n        if (!err) {\n          alert(\"It might be take a few second to update your NFT!\")\n          dispatch(handleFetchData(blockchain.lipToken, blockchain.account));\n        } else {\n          console.log('change name err', err);\n          alert(\"Your lip must be at least level 2 to change its name.\")\n        }\n        setLoading(false);\n      })\n  }\n\n  return (\n    <>\n      <div className=\"container-fluid mt-5\">\n        <div className=\"row\">\n          <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n            <div className=\"content mr-auto ml-auto\">\n              {\n                (!blockchain.account ||\n                  !blockchain.lipToken) ? (\n                  <button className='connect_btn' onClick={(e) => {\n                    e.preventDefault()\n                    dispatch(handleConnect())\n                  }}>Connect to the game with metamask</button>\n                ) : (\n                  <>\n                    <s.TextTitle className='welcome_title'>Welcome to the game</s.TextTitle>\n                    <s.SpacerSmall />\n                    <button disabled={loading} onClick={(e) => {\n                      e.preventDefault()\n                      mintNFT(\"BUI HUY TUNG :)\")\n                    }} className=\"create_button\" >Create new random lip</button>\n                    {\n                      blockchain.errMesg && (\n                        <>\n                          <s.SpacerXSmall />\n                          <s.TextDescription>{blockchain.errMesg}</s.TextDescription>\n                        </>\n                      )\n                    }\n\n                    <s.SpacerSmall />\n                    <s.Container fd={\"row\"} style={{ flexWrap: 'wrap', gap: '3em' }} jc={\"center\"}>\n\n                      {\n                        data.allOwnerLips && data.allOwnerLips.map(item => {\n                          return (\n                            <LipLayout\n                              loading={loading}\n                              key={Math.random()}\n                              item={item}\n                              handleLevelUpLip={handleLevelUpLip}\n                              handleChangeName={handleChangeName}\n                            />\n                          )\n                        })\n                      }\n                    </s.Container>\n                  </>\n                )\n              }\n            </div>\n          </main>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default OwnLip;\n"]},"metadata":{},"sourceType":"module"}