{"ast":null,"code":"import _regeneratorRuntime from \"/home/haiduong/B\\u1EA3n t\\u1EA3i v\\u1EC1/LipToken_NFT_game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/haiduong/B\\u1EA3n t\\u1EA3i v\\u1EC1/LipToken_NFT_game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport Web3 from \"web3\";\nimport LipToken from '../../abis/LipAttack.json';\nexport var actionTypes = Object.freeze({\n  CONNECTION_REQUEST: \"CONNECTION_REQUEST\",\n  CONNECTION_SUCCESS: \"CONNECTION_SUCCESS\",\n  CONNECTION_FAILED: \"CONNECTION_FAILED\",\n  UPDATE_ACCOUNT: \"UPDATE_ACCOUNT\"\n});\n\nvar connectRequest = function connectRequest() {\n  return {\n    type: actionTypes.CONNECTION_REQUEST\n  };\n};\n\nvar connectSuccess = function connectSuccess(payload) {\n  return {\n    type: actionTypes.CONNECTION_SUCCESS,\n    payload: payload\n  };\n};\n\nvar connectFailed = function connectFailed(msg) {\n  return {\n    type: actionTypes.CONNECTION_FAILED,\n    payload: msg\n  };\n};\n\nvar updateAccount = function updateAccount(payload) {\n  return {\n    type: actionTypes.UPDATE_ACCOUNT,\n    payload: payload\n  };\n};\n\nexport var handleConnect = function handleConnect() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var web3, accounts, networkId, lipTokenNetworkData, lipToken;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(connectRequest());\n\n              if (!window.ethereum) {\n                _context.next = 22;\n                break;\n              }\n\n              web3 = new Web3(window.ethereum);\n              _context.prev = 3;\n              _context.next = 6;\n              return window.ethereum.request({\n                method: \"eth_requestAccounts\"\n              });\n\n            case 6:\n              accounts = _context.sent;\n              _context.next = 9;\n              return window.ethereum.request({\n                method: \"net_version\"\n              });\n\n            case 9:\n              networkId = _context.sent;\n              _context.next = 12;\n              return LipToken.networks[networkId];\n\n            case 12:\n              lipTokenNetworkData = _context.sent;\n\n              if (lipTokenNetworkData) {\n                lipToken = new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address);\n                dispatch(connectSuccess({\n                  account: accounts[0],\n                  lipToken: lipToken,\n                  web3: web3\n                })); // add listeners start\n\n                window.ethereum.on(\"accountsChanged\", function (accounts) {\n                  dispatch(updateAccount(accounts[0]));\n                });\n              } else {\n                // add listeners end\n                dispatch(connectFailed(\"Change network to ETH.\"));\n              }\n\n              _context.next = 20;\n              break;\n\n            case 16:\n              _context.prev = 16;\n              _context.t0 = _context[\"catch\"](3);\n              dispatch(connectFailed('Non-Ethereum browser detected. You should consider trying MetaMask!'));\n              console.log('err', _context.t0);\n\n            case 20:\n              _context.next = 24;\n              break;\n\n            case 22:\n              console.log('err');\n              dispatch(connectFailed('Non-Ethereum browser detected. You should consider trying MetaMask!'));\n\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[3, 16]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/haiduong/Bản tải về/LipToken_NFT_game-master/src/redux/blockchain/blockchainActions.js"],"names":["Web3","LipToken","actionTypes","Object","freeze","CONNECTION_REQUEST","CONNECTION_SUCCESS","CONNECTION_FAILED","UPDATE_ACCOUNT","connectRequest","type","connectSuccess","payload","connectFailed","msg","updateAccount","handleConnect","dispatch","window","ethereum","web3","request","method","accounts","networkId","networks","lipTokenNetworkData","lipToken","eth","Contract","abi","address","account","on","console","log"],"mappings":"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","sourcesContent":["import Web3 from \"web3\"\nimport LipToken from '../../abis/LipAttack.json'\n\nexport const actionTypes = Object.freeze({\n  CONNECTION_REQUEST: \"CONNECTION_REQUEST\",\n  CONNECTION_SUCCESS: \"CONNECTION_SUCCESS\",\n  CONNECTION_FAILED: \"CONNECTION_FAILED\",\n  UPDATE_ACCOUNT: \"UPDATE_ACCOUNT\"\n})\n\nconst connectRequest = () => ({\n  type: actionTypes.CONNECTION_REQUEST\n})\n\nconst connectSuccess = (payload) => ({\n  type: actionTypes.CONNECTION_SUCCESS,\n  payload: payload\n})\n\nconst connectFailed = (msg) => ({\n  type: actionTypes.CONNECTION_FAILED,\n  payload: msg\n})\n\nconst updateAccount = (payload) => ({\n  type: actionTypes.UPDATE_ACCOUNT,\n  payload: payload\n})\n\nexport const handleConnect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest())\n    if (window.ethereum) {\n      let web3 = new Web3(window.ethereum)\n      try {\n        // open pop-up request connect with metamask\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        })\n        const networkId = await window.ethereum.request({\n          method: \"net_version\"\n        })\n        const lipTokenNetworkData = await LipToken.networks[networkId]\n        if (lipTokenNetworkData) {\n          const lipToken = new web3.eth.Contract(LipToken.abi, lipTokenNetworkData.address)\n          dispatch(connectSuccess({\n            account: accounts[0],\n            lipToken: lipToken,\n            web3: web3\n          }))\n\n          // add listeners start\n          window.ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]))\n          })\n        } else {\n          // add listeners end\n          dispatch(connectFailed(\"Change network to ETH.\"))\n        }\n      } catch (error) {\n        dispatch(connectFailed('Non-Ethereum browser detected. You should consider trying MetaMask!'))\n        console.log('err', error)\n      }\n    } else {\n      console.log('err');\n      dispatch(connectFailed('Non-Ethereum browser detected. You should consider trying MetaMask!'))\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}