{"ast":null,"code":"import _regeneratorRuntime from \"/home/haiduong/B\\u1EA3n t\\u1EA3i v\\u1EC1/LipToken_NFT_game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/haiduong/B\\u1EA3n t\\u1EA3i v\\u1EC1/LipToken_NFT_game-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nexport var actionTypes = Object.freeze({\n  CHECK_DATA_REQUEST: \"CHECK_DATA_REQUEST\",\n  CHECK_DATA_SUCCESS: 'CHECK_DATA_SUCCESS',\n  CHECK_DATA_FAILED: 'CHECK_DATA_FAILED'\n});\n\nvar fetchDataRequest = function fetchDataRequest() {\n  return {\n    type: actionTypes.CHECK_DATA_REQUEST\n  };\n};\n\nvar fetchDataSuccess = function fetchDataSuccess(payload) {\n  return {\n    type: actionTypes.CHECK_DATA_SUCCESS,\n    payload: payload\n  };\n};\n\nvar fetchDataFailed = function fetchDataFailed(msg) {\n  return {\n    type: actionTypes.CHECK_DATA_FAILED,\n    payload: msg\n  };\n};\n\nexport var handleFetchData = function handleFetchData(lipToken, account) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var allOwnerLips;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              dispatch(fetchDataRequest());\n              _context.prev = 1;\n              _context.next = 4;\n              return lipToken.methods.getOwnerLips(account).call();\n\n            case 4:\n              allOwnerLips = _context.sent;\n              dispatch(fetchDataSuccess({\n                allOwnerLips: allOwnerLips\n              }));\n              _context.next = 12;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(\"fetchDataFailed\", _context.t0);\n              dispatch(fetchDataFailed(\"Couldn't load data from contract.\"));\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var handleFetchDataEnemy = function handleFetchDataEnemy(lipToken, account) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var enemyLips, allOwnerLips;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              dispatch(fetchDataRequest());\n              _context2.prev = 1;\n              _context2.next = 4;\n              return lipToken.methods.getEnemy(account).call();\n\n            case 4:\n              enemyLips = _context2.sent;\n              _context2.next = 7;\n              return lipToken.methods.getOwnerLips(account).call();\n\n            case 7:\n              allOwnerLips = _context2.sent;\n              dispatch(fetchDataSuccess({\n                enemyLips: enemyLips,\n                allOwnerLips: allOwnerLips\n              }));\n              _context2.next = 15;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n              console.log(\"fetchDataFailed enemy\", _context2.t0);\n              dispatch(fetchDataFailed(\"Couldn't load data from contract.\"));\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 11]]);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var handleFetchDataWorldLip = function handleFetchDataWorldLip(lipToken) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var worldLips;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              dispatch(fetchDataRequest());\n              _context3.prev = 1;\n              _context3.next = 4;\n              return lipToken.methods.getAllLips().call();\n\n            case 4:\n              worldLips = _context3.sent;\n              dispatch(fetchDataSuccess({\n                worldLips: worldLips\n              }));\n              _context3.next = 12;\n              break;\n\n            case 8:\n              _context3.prev = 8;\n              _context3.t0 = _context3[\"catch\"](1);\n              console.log(\"fetchDataFailed world\", _context3.t0);\n              dispatch(fetchDataFailed(\"Couldn't load data from contract.\"));\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[1, 8]]);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};","map":{"version":3,"sources":["/home/haiduong/Bản tải về/LipToken_NFT_game-master/src/redux/data/dataActions.js"],"names":["actionTypes","Object","freeze","CHECK_DATA_REQUEST","CHECK_DATA_SUCCESS","CHECK_DATA_FAILED","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","msg","handleFetchData","lipToken","account","dispatch","methods","getOwnerLips","call","allOwnerLips","console","log","handleFetchDataEnemy","getEnemy","enemyLips","handleFetchDataWorldLip","getAllLips","worldLips"],"mappings":"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","sourcesContent":["export const actionTypes = Object.freeze({\n  CHECK_DATA_REQUEST: \"CHECK_DATA_REQUEST\",\n  CHECK_DATA_SUCCESS: 'CHECK_DATA_SUCCESS',\n  CHECK_DATA_FAILED: 'CHECK_DATA_FAILED'\n})\n\nconst fetchDataRequest = () => ({\n  type: actionTypes.CHECK_DATA_REQUEST\n})\n\nconst fetchDataSuccess = (payload) => ({\n  type: actionTypes.CHECK_DATA_SUCCESS,\n  payload: payload\n})\n\nconst fetchDataFailed = (msg) => ({\n  type: actionTypes.CHECK_DATA_FAILED,\n  payload: msg\n})\n\n\nexport const handleFetchData = (lipToken, account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest())\n    try {\n      let allOwnerLips = await lipToken.methods.getOwnerLips(account).call()\n      dispatch(fetchDataSuccess({\n        allOwnerLips: allOwnerLips\n      }))\n    } catch (error) {\n      console.log(\"fetchDataFailed\", error)\n      dispatch(fetchDataFailed(\"Couldn't load data from contract.\"))\n    }\n  }\n}\n\nexport const handleFetchDataEnemy = (lipToken, account) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest())\n    try {\n      let enemyLips = await lipToken.methods.getEnemy(account).call()\n      let allOwnerLips = await lipToken.methods.getOwnerLips(account).call()\n      dispatch(fetchDataSuccess({\n        enemyLips: enemyLips,\n        allOwnerLips: allOwnerLips\n      }))\n    } catch (error) {\n      console.log(\"fetchDataFailed enemy\", error)\n      dispatch(fetchDataFailed(\"Couldn't load data from contract.\"))\n    }\n  }\n}\n\nexport const handleFetchDataWorldLip = (lipToken) => {\n  return async (dispatch) => {\n    dispatch(fetchDataRequest())\n    try {\n      let worldLips = await lipToken.methods.getAllLips().call()\n      dispatch(fetchDataSuccess({\n        worldLips: worldLips\n      }))\n    } catch (error) {\n      console.log(\"fetchDataFailed world\", error)\n      dispatch(fetchDataFailed(\"Couldn't load data from contract.\"))\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}